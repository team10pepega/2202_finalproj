#include <AccelStepper.h>
#include <SoftwareSerial.h>

//pins for stepper motors
#define motorInterfaceType 1
#define dirPinR 1
#define stepPinR 0
#define dirPinL 3
#define stepPinL 2

AccelStepper stepperR = AccelStepper(motorInterfaceType, stepPinR, dirPinR);
AccelStepper stepperL = AccelStepper(motorInterfaceType, stepPinL, dirPinL);

//drivemode variables
int runmode = 1;
//variables needed for adjustment in drivemode
const int rotate90 = 600;//steps needed for 90 degree turn
const int rotate180 = 1200;//steps needed for 180 degree turn
const int rotate360 = 2400;//steps needed for 360 degree turn

//variables and pins for ultrasonic
const int trigPin = 5;
const int echoPin = 6;
long duration;
long distance;
long mindistance = 10;
long beacondistance = 5;

//variables and pins for ir reciever
SoftwareSerial irrec(A0, A0);
char sig1 = '0';
char sig2 = '5';
char letter;
boolean firstbeacon = false;
boolean irsignal = false;

//variables and pins for button
const int button1 = 4;
int buttonState = 0;
boolean toggle = false;

void setup() {
  Serial.begin(9600);

  stepperR.setMaxSpeed(1000);
  stepperL.setMaxSpeed(1000);
  stepperR.setAcceleration(30);
  stepperL.setAcceleration(30);

  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);

  irrec.begin(2400);

  pinMode(button1, INPUT);
}

void loop() {
  int stepdistance;
  Serial.println(mode);
  Serial.println(distance);
  hi
  switch (mode) {
    case 1://drive and find
      Ping();
      if (distance <= mindistance) {
        rotation90();
      } else if (distance >= searchthreshold) {
        stepdistance = distance / 0.1;
        fowards(stepdistance);
        findbeacon();
      } else if (distance < searchthreshold && distance > mindistance) {
        fowards(stepdistance);
      }
      break;
    case 2://drive towards beacon
      Ping();
      stepdistance = (distance-20) / 0.1;
      fowards(stepdistance);
      distance = 20;
      stepdistance = distance/0.1;
      slowfowards(stepdistance);
      drive180();
      if (firstbeacon == false) {
        firstbeacon = true;
        mode = 1;
      } else {
        mode = 3;
      }
      break;
    case 3://bridge stuff
      stepperL.stop();
      stepperR.stop();
      break;
  }
}

void Ping() {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);

  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  duration = pulseIn(echoPin, HIGH);
  distance = duration * 0.034 / 2; //distance in cm
}
void fowards(int stepdistance){
      stepperR.setCurrentPosition(0);
      stepperL.setCurrentPosition(0);
      while (stepperL.currentPosition() != stepdistance) {
        stepperL.setSpeed(100);
        stepperR.setSpeed(100);
        stepperL.runSpeed();
        stepperR.runSpeed();
      }
}
void slowfowards(int stepdistance){
      stepperR.setCurrentPosition(0);
      stepperL.setCurrentPosition(0);
      while (stepperL.currentPosition() != stepdistance) {
        stepperL.setSpeed(50);
        stepperR.setSpeed(50);
        stepperL.runSpeed();
        stepperR.runSpeed();
      }
}
void rotation90(){
      stepperR.setCurrentPosition(0);
      stepperL.setCurrentPosition(0);
      while (stepperL.currentPosition() != rotate90) {
        stepperL.setSpeed(50);
        stepperR.setSpeed(-50);
        stepperL.runSpeed();
        stepperR.runSpeed();
      }
}
void findbeacon(){
      char letter;
      stepperR.setCurrentPosition(0);
      stepperL.setCurrentPosition(0);
      while (stepperL.currentPosition() != rotate360) {
        stepperL.setSpeed(50);
        stepperR.setSpeed(-50);
        stepperL.runSpeed();
        stepperR.runSpeed();
        irlight(letter);
        if (letter == sig1 && firstbeacon == false) {
          mode = 2;
          break;
        }
        if (letter == sig2 && firstbeacon == true) {
          mode = 2;
          break;
        }
      }
}
void drive180(){
      stepperR.setCurrentPosition(0);
      stepperL.setCurrentPosition(0);
      while (stepperL.currentPosition() != -100) {
        stepperL.setSpeed(-50);
        stepperR.setSpeed(-50);
        stepperL.runSpeed();
        stepperR.runSpeed();
      }
      stepperR.setCurrentPosition(0);
      stepperL.setCurrentPosition(0);
      while (stepperL.currentPosition() != rotate180) {
        stepperL.setSpeed(50);
        stepperR.setSpeed(-50);
        stepperL.runSpeed();
        stepperR.runSpeed();
      }
}

void irlight(char letter) {
  if (irrec.available()) {
    letter = irrec.read();
  }
}
